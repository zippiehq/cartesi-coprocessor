name: Coprocessor sanity check

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main   
    
  workflow_dispatch:

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  
env:
  DAPP_NAME: test-build
  CONTRACT_NAME: MyContract
  OWNER_ADDRESS: "0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf"
  SENDER_ADDRESS: "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  NETWORK: devnet 
  SKIP_SANITY_CHECK: "true"
   

jobs:
  sanity-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive


      - name: Set up docker compose
        uses: docker/setup-buildx-action@v2

      - name: Pull latest images
        run: docker compose -f docker-compose-devnet.yaml pull

      - name: Start docker-compose service
        run: IPFS_DAEMON_ONLINE= docker compose -f docker-compose-devnet.yaml up --wait --wait-timeout 300 -d || (docker compose -f docker-compose-devnet.yaml logs && false)
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Sanity Run
        if: ${{ env.SKIP_SANITY_CHECK != 'true' }}
        run: |
          echo "Starting ensure process..."
          curl -X POST "http://localhost:3034/ensure/bafybeihpo6pncx7hyf26v6vszb25q4spszigxkfc4fxvamfzpy5b2bjydm/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/289182342"

          # check the status
          check_status() {
            STATUS=$(curl -X POST -s "http://localhost:3034/ensure/bafybeihpo6pncx7hyf26v6vszb25q4spszigxkfc4fxvamfzpy5b2bjydm/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/289182342" | jq -r '.operator_ids_with_states["931a13987a36a6508d2ade6961f55d97209a7b42f66a7f0fdd899dea8fcb7d4d"]')
            echo "Current status: $STATUS"
            if [ "$STATUS" == "ready" ]; then
              return 0
            else
              return 1
            fi
          }

          echo "Polling for status to be 'ready'..."
          for i in {1..600}; do
            if check_status; then
              echo "Status is ready."
              break
            fi
            echo "Status not ready yet. Waiting 10 seconds..."
            sleep 10
            if [ "$i" -eq 600 ]; then
              echo "Timeout waiting for status to be ready."
              exit 1
            fi
          done

          echo "Calling issue_task endpoint..."
          curl -X POST "http://localhost:3034/issue_task/11084eeb3de8d6ad262736d1f59b129fc9c134ab52248d39c2c920facafe8403/0xA44151489861Fe9e3055d95adC98FbD462B948e7" -d "example"
          docker compose -f docker-compose-devnet.yaml logs

          echo "Sanity check completed successfully."

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.6.3


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: '20'

      - name: Checkout CLI repository
        uses: actions/checkout@v3
        with:
          repository: cartesi/cli
          ref: feature/coprocessor-cli
          path: cli
      
      - name: install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: install Cartesi CLI
        run: npm install -g @cartesi/cli

      - name: Install and build dependencies for cli
        run: |
          cd cli
          pnpm install
          pnpm build --filter @cartesi/cli

      - name: Create Coprocessor Application Template
        run: |
          cd cli
          node apps/cli/dist/index.js coprocessor create test-build --template python --branch feat/coprocessor-templates
  
      - name: Copy contract
        run: |
          ls -lR cli/${{ env.DAPP_NAME }}
          cp .github/workflows/MyContract.sol cli/${{ env.DAPP_NAME }}/contracts/src/MyContract.sol
        
      - name: Copy dapp.py app 
        run: |
          cp .github/workflows/dapp.py cli/${{ env.DAPP_NAME }}/app/dapp.py

      - name: Build Coprocessor Application
        run: |
          cd cli/test-build/app
          node ../../apps/cli/dist/index.js build

      - name: Install Rust and Cargo
        uses: actions-rs/toolchain@v1
        with:
              profile: minimal
              toolchain: stable
              override: true
  
      - name: Check formatting
        run: |
          cd contracts
          forge fmt --check
             
      - name: Install Cartesi Coprocessor cli
        run: |
          cargo install cartesi-coprocessor
          cartesi-coprocessor --version
          
      - name: publish Cartesi project
        run: |
            cd cli/${{ env.DAPP_NAME }}/app
            cartesi-coprocessor publish --network ${{ env.NETWORK }} --build false

      - name: get machine_hash
        id: get_hash
        run: |
          cd cli/${{ env.DAPP_NAME }}/app
          MACHINE_HASH=$(xxd -c 0 -p .cartesi/image/hash)
          echo "::set-output name=machine_hash::0x$MACHINE_HASH"
       
      - name: Install forge soldeer
        run: |
          cd cli/${{ env.DAPP_NAME }}/contracts
          forge soldeer install

      - name: Deploy Contract
        id: deploy
        run: |
          cd cli/${{ env.DAPP_NAME }}/contracts
          DEPLOYMENT=$(cartesi-coprocessor deploy \
            --contract-name ${{ env.CONTRACT_NAME }} \
            --network ${{ env.NETWORK }} \
            --constructor-args "${{ env.OWNER_ADDRESS }}" \
            "${{ steps.get_hash.outputs.machine_hash }}")
          echo "$DEPLOYMENT"
          CONTRACT_ADDRESS=$(echo "$DEPLOYMENT" | grep 'Deployed to:' | awk '{print $3}')
          echo "::set-output name=contract_address::$CONTRACT_ADDRESS"

      - name: Execute Contract
        run: |
          cast send --unlocked \
            --from ${{ env.SENDER_ADDRESS }} \
            "${{ steps.deploy.outputs.contract_address }}" \
            "runExecution(bytes)" "0x1234"

      - name: Cast call
        run: |
          result=false
          for i in {1..30}; do
            result=$(cast call ${{ steps.deploy.outputs.contract_address }} "noticeHandled() returns (bool)")
            echo "Result: $result"
            if [ "$result" == "true" ]; then
              echo "Notice handled successfully."
              break
            fi
            echo "Still false, sleeping  ($i/30)"
            sleep 1
          done

          echo "docker logs:"
          docker compose -f docker-compose-devnet.yaml logs

          if [ "$result" == "false" ]; then
            echo "Notice not handled after 30 attempts."
            exit 1
          fi
